{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\n/**\n * useCardProgress - React hook for live card progress (percent and total tasks)\n * @param cardId string\n * @returns { progress, tasksCount }\n */\nexport function useCardProgress(cardId) {\n  _s();\n  const [tasksCount, setTasksCount] = useState(0);\n  const [completedCount, setCompletedCount] = useState(0);\n  useEffect(() => {\n    if (!cardId) {\n      setTasksCount(0);\n      setCompletedCount(0);\n      return;\n    }\n    let unsub = null;\n    try {\n      const tasksRef = collection(db, 'cards', cardId, 'tasks');\n      const q = query(tasksRef);\n      unsub = onSnapshot(q, snap => {\n        setTasksCount(snap.size);\n        setCompletedCount(snap.docs.filter(d => d.data().completed).length);\n      });\n    } catch (e) {\n      setTasksCount(0);\n      setCompletedCount(0);\n    }\n    return () => {\n      if (unsub) unsub();\n    };\n  }, [cardId]);\n  const progress = tasksCount > 0 ? completedCount / tasksCount * 100 : 0;\n  return {\n    progress,\n    tasksCount\n  };\n}\n_s(useCardProgress, \"JxuXw29i7A70Eu21EyDhDzfZ3gs=\");","map":{"version":3,"names":["useEffect","useState","useCardProgress","cardId","_s","tasksCount","setTasksCount","completedCount","setCompletedCount","unsub","tasksRef","collection","db","q","query","onSnapshot","snap","size","docs","filter","d","data","completed","length","e","progress"],"sources":["C:/Users/aikid/CascadeProjects/chalet-fractal-flow/src/components/useCardProgress.ts"],"sourcesContent":["import { useEffect, useState } from 'react';\n\nexport interface CardProgress {\n  progress: number;\n  tasksCount: number;\n}\n\n/**\n * useCardProgress - React hook for live card progress (percent and total tasks)\n * @param cardId string\n * @returns { progress, tasksCount }\n */\nexport function useCardProgress(cardId: string): CardProgress {\n  const [tasksCount, setTasksCount] = useState(0);\n  const [completedCount, setCompletedCount] = useState(0);\n\n  useEffect(() => {\n    if (!cardId) {\n      setTasksCount(0);\n      setCompletedCount(0);\n      return;\n    }\n    let unsub: (() => void) | null = null;\n    try {\n      const tasksRef = collection(db, 'cards', cardId, 'tasks');\n      const q = query(tasksRef);\n      unsub = onSnapshot(q, (snap: QuerySnapshot<DocumentData>) => {\n        setTasksCount(snap.size);\n        setCompletedCount(snap.docs.filter((d: QueryDocumentSnapshot<DocumentData>) => d.data().completed).length);\n      });\n    } catch (e) {\n      setTasksCount(0);\n      setCompletedCount(0);\n    }\n    return () => { if (unsub) unsub(); };\n  }, [cardId]);\n\n  const progress = tasksCount > 0 ? (completedCount / tasksCount) * 100 : 0;\n\n  return { progress, tasksCount };\n}\n"],"mappings":";AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAO3C;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,eAAeA,CAACC,MAAc,EAAgB;EAAAC,EAAA;EAC5D,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGL,QAAQ,CAAC,CAAC,CAAC;EAC/C,MAAM,CAACM,cAAc,EAAEC,iBAAiB,CAAC,GAAGP,QAAQ,CAAC,CAAC,CAAC;EAEvDD,SAAS,CAAC,MAAM;IACd,IAAI,CAACG,MAAM,EAAE;MACXG,aAAa,CAAC,CAAC,CAAC;MAChBE,iBAAiB,CAAC,CAAC,CAAC;MACpB;IACF;IACA,IAAIC,KAA0B,GAAG,IAAI;IACrC,IAAI;MACF,MAAMC,QAAQ,GAAGC,UAAU,CAACC,EAAE,EAAE,OAAO,EAAET,MAAM,EAAE,OAAO,CAAC;MACzD,MAAMU,CAAC,GAAGC,KAAK,CAACJ,QAAQ,CAAC;MACzBD,KAAK,GAAGM,UAAU,CAACF,CAAC,EAAGG,IAAiC,IAAK;QAC3DV,aAAa,CAACU,IAAI,CAACC,IAAI,CAAC;QACxBT,iBAAiB,CAACQ,IAAI,CAACE,IAAI,CAACC,MAAM,CAAEC,CAAsC,IAAKA,CAAC,CAACC,IAAI,CAAC,CAAC,CAACC,SAAS,CAAC,CAACC,MAAM,CAAC;MAC5G,CAAC,CAAC;IACJ,CAAC,CAAC,OAAOC,CAAC,EAAE;MACVlB,aAAa,CAAC,CAAC,CAAC;MAChBE,iBAAiB,CAAC,CAAC,CAAC;IACtB;IACA,OAAO,MAAM;MAAE,IAAIC,KAAK,EAAEA,KAAK,CAAC,CAAC;IAAE,CAAC;EACtC,CAAC,EAAE,CAACN,MAAM,CAAC,CAAC;EAEZ,MAAMsB,QAAQ,GAAGpB,UAAU,GAAG,CAAC,GAAIE,cAAc,GAAGF,UAAU,GAAI,GAAG,GAAG,CAAC;EAEzE,OAAO;IAAEoB,QAAQ;IAAEpB;EAAW,CAAC;AACjC;AAACD,EAAA,CA5BeF,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}