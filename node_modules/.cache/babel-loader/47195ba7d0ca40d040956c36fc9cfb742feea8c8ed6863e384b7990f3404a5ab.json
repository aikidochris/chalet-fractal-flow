{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\n/**\n * useCardProgress - React hook for live card progress (percent and total tasks)\n * @param cardId string\n * @returns { progress, tasksCount }\n */\nexport function useCardProgress(cardId) {\n  _s();\n  const [tasks, setTasks] = useState([]);\n\n  // In a real app, this would fetch tasks from your data store (Firestore, API, etc)\n  // For now we'll use dummy tasks to demonstrate the progress calculation\n  useEffect(() => {\n    // Example tasks - in a real app these would be fetched based on cardId\n    const exampleTasks = [{\n      id: 'task-1',\n      title: 'Design UI',\n      completed: true\n    }, {\n      id: 'task-2',\n      title: 'Implement logic',\n      completed: false\n    }, {\n      id: 'task-3',\n      title: 'Write tests',\n      completed: false\n    }];\n    setTasks(exampleTasks);\n  }, [cardId]);\n  const tasksCount = tasks.length;\n  const completedCount = tasks.filter(task => task.completed).length;\n  const progress = tasksCount > 0 ? Math.round(completedCount / tasksCount * 100) : 0;\n  return {\n    progress,\n    tasksCount\n  };\n}\n_s(useCardProgress, \"bBd6yqkqV9dlkj9ENgRyXKaiXpk=\");","map":{"version":3,"names":["useEffect","useState","useCardProgress","cardId","_s","tasks","setTasks","exampleTasks","id","title","completed","tasksCount","length","completedCount","filter","task","progress","Math","round"],"sources":["C:/Users/aikid/CascadeProjects/chalet-fractal-flow/src/components/useCardProgress.ts"],"sourcesContent":["import { useEffect, useState } from 'react';\n\ninterface Task {\n  id: string;\n  title: string;\n  completed: boolean;\n}\n\n/**\n * useCardProgress - React hook for live card progress (percent and total tasks)\n * @param cardId string\n * @returns { progress, tasksCount }\n */\nexport function useCardProgress(cardId: string): { progress: number; tasksCount: number } {\n  const [tasks, setTasks] = useState<Task[]>([]);\n\n  // In a real app, this would fetch tasks from your data store (Firestore, API, etc)\n  // For now we'll use dummy tasks to demonstrate the progress calculation\n  useEffect(() => {\n    // Example tasks - in a real app these would be fetched based on cardId\n    const exampleTasks = [\n      { id: 'task-1', title: 'Design UI', completed: true },\n      { id: 'task-2', title: 'Implement logic', completed: false },\n      { id: 'task-3', title: 'Write tests', completed: false },\n    ];\n    setTasks(exampleTasks);\n  }, [cardId]);\n\n  const tasksCount = tasks.length;\n  const completedCount = tasks.filter(task => task.completed).length;\n  const progress = tasksCount > 0 ? Math.round((completedCount / tasksCount) * 100) : 0;\n\n  return { progress, tasksCount };\n}\n"],"mappings":";AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAQ3C;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,eAAeA,CAACC,MAAc,EAA4C;EAAAC,EAAA;EACxF,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGL,QAAQ,CAAS,EAAE,CAAC;;EAE9C;EACA;EACAD,SAAS,CAAC,MAAM;IACd;IACA,MAAMO,YAAY,GAAG,CACnB;MAAEC,EAAE,EAAE,QAAQ;MAAEC,KAAK,EAAE,WAAW;MAAEC,SAAS,EAAE;IAAK,CAAC,EACrD;MAAEF,EAAE,EAAE,QAAQ;MAAEC,KAAK,EAAE,iBAAiB;MAAEC,SAAS,EAAE;IAAM,CAAC,EAC5D;MAAEF,EAAE,EAAE,QAAQ;MAAEC,KAAK,EAAE,aAAa;MAAEC,SAAS,EAAE;IAAM,CAAC,CACzD;IACDJ,QAAQ,CAACC,YAAY,CAAC;EACxB,CAAC,EAAE,CAACJ,MAAM,CAAC,CAAC;EAEZ,MAAMQ,UAAU,GAAGN,KAAK,CAACO,MAAM;EAC/B,MAAMC,cAAc,GAAGR,KAAK,CAACS,MAAM,CAACC,IAAI,IAAIA,IAAI,CAACL,SAAS,CAAC,CAACE,MAAM;EAClE,MAAMI,QAAQ,GAAGL,UAAU,GAAG,CAAC,GAAGM,IAAI,CAACC,KAAK,CAAEL,cAAc,GAAGF,UAAU,GAAI,GAAG,CAAC,GAAG,CAAC;EAErF,OAAO;IAAEK,QAAQ;IAAEL;EAAW,CAAC;AACjC;AAACP,EAAA,CApBeF,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}