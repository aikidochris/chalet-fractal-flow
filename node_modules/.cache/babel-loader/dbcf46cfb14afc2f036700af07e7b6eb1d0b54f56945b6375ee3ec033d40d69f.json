{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aikid\\\\CascadeProjects\\\\chalet-fractal-flow\\\\src\\\\components\\\\KanbanBoard.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef } from 'react';\nimport { DndContext, PointerSensor, useSensor, useSensors, closestCenter } from '@dnd-kit/core';\nimport KanbanColumn from './KanbanColumn';\nimport NewColumnModal from './NewColumnModal';\nimport RenameColumnInline from './RenameColumnInline';\nimport Breadcrumbs from './Breadcrumbs';\nimport DepthLimitModal from './DepthLimitModal';\nimport CardModal from './CardModal';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst dummyBoard = {\n  id: 'board-1',\n  title: 'My Test Board',\n  depthLevel: 0\n};\nconst dummyColumns = [{\n  id: 'Ideas',\n  title: 'Ideas'\n}, {\n  id: 'In Progress',\n  title: 'In Progress'\n}, {\n  id: 'Completed',\n  title: 'Completed'\n}];\nconst dummyCards = []; // Start with no cards for a fresh Kanban\n\nfunction KanbanBoard() {\n  _s();\n  // Use dummy data instead of Firestore\n  const [boardData] = useState(dummyBoard);\n  const [columns, setColumns] = useState(dummyColumns);\n  const [cards, setCards] = useState(dummyCards);\n  // UI state\n  const [isDragging, setIsDragging] = useState(false);\n  const [isDraggingCard, setIsDraggingCard] = useState(null);\n  const [breadcrumbs, setBreadcrumbs] = useState([dummyBoard]);\n  const [showDepthModal, setShowDepthModal] = useState(false);\n  const [showNewColumnModal, setShowNewColumnModal] = useState(false);\n  const [renamingColumnId, setRenamingColumnId] = useState(null);\n  const newColumnBtnRef = useRef(null);\n  const [selectedCard, setSelectedCard] = useState(null);\n\n  // Override drag sensors (no change)\n  const sensors = useSensors(useSensor(PointerSensor, {\n    activationConstraint: {\n      distance: 5\n    }\n  }));\n\n  // Handlers operate on local dummy state\n  const handleMoveCard = (card, newStatus) => {\n    setCards(c => {\n      const updatedCards = c.map(x => x.id === card.id ? {\n        ...x,\n        status: newStatus\n      } : x);\n      // Force state update by creating new array reference\n      return [...updatedCards];\n    });\n  };\n  const handleAddCard = (status, title) => {\n    const id = `card-${Date.now()}`;\n    setCards(c => [{\n      id,\n      boardId: dummyBoard.id,\n      title,\n      description: '',\n      status,\n      pinned: false,\n      hasSubBoard: false\n    }, ...c]);\n  };\n  const handleTogglePin = cardId => {\n    setCards(cardsList => cardsList.map(card => card.id === cardId ? {\n      ...card,\n      pinned: !card.pinned\n    } : card));\n    setSelectedCard(sc => (sc === null || sc === void 0 ? void 0 : sc.id) === cardId ? {\n      ...sc,\n      pinned: !sc.pinned\n    } : sc);\n  };\n\n  // Handle drag end: update local state\n  const handleDragEnd = event => {\n    console.log('DragEnd event:', event);\n    const {\n      active,\n      over\n    } = event;\n    if (!over) return;\n    const newStatus = over.id;\n    const cardId = active.id;\n    console.log(`Attempting to move card ${cardId} to column ${newStatus}`);\n    if (columns.some(c => c.id === newStatus)) {\n      const card = cards.find(c => c.id === cardId);\n      if (card && card.status !== newStatus) {\n        console.log(`Moving card ${cardId} from ${card.status} to ${newStatus}`);\n        handleMoveCard(card, newStatus);\n      }\n    }\n  };\n\n  // No loading guard needed: dummy data is always present\n  return /*#__PURE__*/_jsxDEV(DndContext, {\n    sensors: sensors,\n    collisionDetection: closestCenter,\n    onDragStart: event => {\n      setIsDragging(true);\n      if (event && event.active && event.active.id) {\n        setIsDraggingCard(String(event.active.id));\n      }\n    },\n    onDragEnd: event => {\n      setIsDragging(false);\n      setIsDraggingCard(null);\n      handleDragEnd(event);\n    },\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bg-background rounded-xl shadow-card p-6\",\n      children: [/*#__PURE__*/_jsxDEV(Breadcrumbs, {\n        path: breadcrumbs\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"w-full overflow-x-auto pb-4\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex gap-6 flex-nowrap justify-center mx-auto min-w-fit\",\n          style: {\n            scrollbarWidth: 'thin'\n          },\n          children: [columns.map((col, idx) => {\n            const isRenaming = renamingColumnId === col.id;\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"flex flex-col items-stretch\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"flex items-center gap-1 mb-1\",\n                children: isRenaming ? /*#__PURE__*/_jsxDEV(RenameColumnInline, {\n                  value: col.title,\n                  onSave: name => {\n                    if (!name.trim()) return;\n                    setColumns(cols => cols.map(c => c.id === col.id ? {\n                      ...c,\n                      title: name.trim()\n                    } : c));\n                    setRenamingColumnId(null);\n                  },\n                  onCancel: () => setRenamingColumnId(null)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 131,\n                  columnNumber: 23\n                }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n                  children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                    className: \"text-lg font-semibold text-gray-800 bg-transparent border-none px-0 py-0 cursor-pointer hover:underline focus:outline-accent\",\n                    onClick: () => setRenamingColumnId(col.id),\n                    tabIndex: 0,\n                    \"aria-label\": `Rename column ${col.title}`,\n                    style: {\n                      background: 'none'\n                    },\n                    children: col.title\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 142,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                    className: \"ml-1 text-gray-400 hover:text-accent focus:text-accent p-0.5 rounded focus:outline-accent\",\n                    onClick: () => setRenamingColumnId(col.id),\n                    tabIndex: 0,\n                    \"aria-label\": `Edit column ${col.title}`,\n                    style: {\n                      background: 'none'\n                    },\n                    children: /*#__PURE__*/_jsxDEV(\"svg\", {\n                      width: \"16\",\n                      height: \"16\",\n                      viewBox: \"0 0 20 20\",\n                      fill: \"none\",\n                      children: /*#__PURE__*/_jsxDEV(\"path\", {\n                        d: \"M4 13.5V16h2.5l7.06-7.06-2.5-2.5L4 13.5zm10.71-6.29c.19-.19.29-.44.29-.71s-.1-.52-.29-.71l-1.5-1.5a1.003 1.003 0 00-1.42 0l-1.13 1.13 2.5 2.5 1.13-1.13z\",\n                        fill: \"currentColor\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 158,\n                        columnNumber: 87\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 158,\n                      columnNumber: 27\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 151,\n                    columnNumber: 25\n                  }, this)]\n                }, void 0, true)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 129,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(KanbanColumn, {\n                columnId: col.id,\n                title: col.title,\n                cards: cards.filter(c => c.status === col.id),\n                onCardClick: card => {\n                  if (card.hasSubBoard && card.subBoardId) {\n                    if (boardData && boardData.depthLevel >= 3) {\n                      setShowDepthModal(true);\n                    } else {\n                      // Do nothing for now\n                    }\n                  } else {\n                    setSelectedCard(card);\n                  }\n                },\n                onMoveCard: handleMoveCard,\n                onAddCard: title => handleAddCard(col.id, title),\n                isDragging: isDragging,\n                setIsDragging: setIsDragging,\n                isDraggingCard: isDraggingCard\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 163,\n                columnNumber: 19\n              }, this)]\n            }, col.id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 128,\n              columnNumber: 17\n            }, this);\n          }), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex flex-col items-center justify-center min-w-[160px]\",\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              ref: newColumnBtnRef,\n              className: \"flex items-center gap-2 px-4 py-2 rounded border border-gray-200 bg-gray-50 text-gray-400 hover:text-accent hover:border-accent transition-colors focus:outline-accent focus:ring-2 focus:ring-accent/30 text-base font-medium mt-8 mb-2\",\n              style: {\n                minHeight: 44\n              },\n              onClick: () => setShowNewColumnModal(true),\n              tabIndex: 0,\n              \"aria-label\": \"Add new column\",\n              children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n                width: \"20\",\n                height: \"20\",\n                fill: \"none\",\n                viewBox: \"0 0 20 20\",\n                children: [/*#__PURE__*/_jsxDEV(\"circle\", {\n                  cx: \"10\",\n                  cy: \"10\",\n                  r: \"9\",\n                  stroke: \"currentColor\",\n                  strokeWidth: \"2\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 197,\n                  columnNumber: 77\n                }, this), /*#__PURE__*/_jsxDEV(\"path\", {\n                  d: \"M10 6v8M6 10h8\",\n                  stroke: \"currentColor\",\n                  strokeWidth: \"2\",\n                  strokeLinecap: \"round\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 197,\n                  columnNumber: 146\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 197,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                children: \"New Column\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 198,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 189,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 188,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(NewColumnModal, {\n            open: showNewColumnModal,\n            onClose: () => setShowNewColumnModal(false),\n            onCreate: name => {\n              if (!name.trim()) return;\n              // Generate unique id based on name and timestamp\n              const id = name.trim().replace(/\\s+/g, '-') + '-' + Date.now();\n              setColumns(cols => [...cols, {\n                id,\n                title: name.trim()\n              }]);\n              setShowNewColumnModal(false);\n              setTimeout(() => {\n                var _newColumnBtnRef$curr;\n                return (_newColumnBtnRef$curr = newColumnBtnRef.current) === null || _newColumnBtnRef$curr === void 0 ? void 0 : _newColumnBtnRef$curr.focus();\n              }, 100);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 202,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }, this), selectedCard ? /*#__PURE__*/_jsxDEV(CardModal, {\n        card: selectedCard,\n        onClose: () => setSelectedCard(null),\n        onTogglePin: handleTogglePin\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 11\n      }, this) : null, /*#__PURE__*/_jsxDEV(DepthLimitModal, {\n        open: showDepthModal,\n        onCancel: () => setShowDepthModal(false),\n        onConfirm: () => setShowDepthModal(false)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 5\n  }, this);\n}\n_s(KanbanBoard, \"94wzwL0CQNK7Dvx+eO+3CUnVhSU=\", false, function () {\n  return [useSensors, useSensor];\n});\n_c = KanbanBoard;\nexport default KanbanBoard;\nvar _c;\n$RefreshReg$(_c, \"KanbanBoard\");","map":{"version":3,"names":["React","useState","useRef","DndContext","PointerSensor","useSensor","useSensors","closestCenter","KanbanColumn","NewColumnModal","RenameColumnInline","Breadcrumbs","DepthLimitModal","CardModal","jsxDEV","_jsxDEV","Fragment","_Fragment","dummyBoard","id","title","depthLevel","dummyColumns","dummyCards","KanbanBoard","_s","boardData","columns","setColumns","cards","setCards","isDragging","setIsDragging","isDraggingCard","setIsDraggingCard","breadcrumbs","setBreadcrumbs","showDepthModal","setShowDepthModal","showNewColumnModal","setShowNewColumnModal","renamingColumnId","setRenamingColumnId","newColumnBtnRef","selectedCard","setSelectedCard","sensors","activationConstraint","distance","handleMoveCard","card","newStatus","c","updatedCards","map","x","status","handleAddCard","Date","now","boardId","description","pinned","hasSubBoard","handleTogglePin","cardId","cardsList","sc","handleDragEnd","event","console","log","active","over","some","find","collisionDetection","onDragStart","String","onDragEnd","children","className","path","fileName","_jsxFileName","lineNumber","columnNumber","style","scrollbarWidth","col","idx","isRenaming","value","onSave","name","trim","cols","onCancel","onClick","tabIndex","background","width","height","viewBox","fill","d","columnId","filter","onCardClick","subBoardId","onMoveCard","onAddCard","ref","minHeight","cx","cy","r","stroke","strokeWidth","strokeLinecap","open","onClose","onCreate","replace","setTimeout","_newColumnBtnRef$curr","current","focus","onTogglePin","onConfirm","_c","$RefreshReg$"],"sources":["C:/Users/aikid/CascadeProjects/chalet-fractal-flow/src/components/KanbanBoard.tsx"],"sourcesContent":["import React, { useState, useEffect, useRef, useContext } from 'react';\nimport { TaskData } from './CardModal';\nimport {\n  DndContext,\n  PointerSensor,\n  useSensor,\n  useSensors,\n  closestCenter,\n  DragEndEvent\n} from '@dnd-kit/core';\n\nimport KanbanColumn from './KanbanColumn';\nimport NewColumnModal from './NewColumnModal';\nimport RenameColumnInline from './RenameColumnInline';\nimport Breadcrumbs from './Breadcrumbs';\nimport DepthLimitModal from './DepthLimitModal';\nimport CardModal from './CardModal';\nimport LoadingScreen from './LoadingScreen';\n\nexport interface CardData {\n  id: string;\n  boardId: string;\n  title: string;\n  description: string;\n  status: string;\n  pinned: boolean;\n  dueDate?: string;\n  hasSubBoard: boolean;\n  subBoardId?: string;\n  color?: string; // pastel color key\n  tasks?: TaskData[];\n}\n\nexport interface BoardState {\n  id: string;\n  title: string;\n  parentBoardId?: string;\n  depthLevel: number;\n}\n\nconst dummyBoard: BoardState = { id: 'board-1', title: 'My Test Board', depthLevel: 0 };\nconst dummyColumns: Array<{ id: string; title: string }> = [\n  { id: 'Ideas', title: 'Ideas' },\n  { id: 'In Progress', title: 'In Progress' },\n  { id: 'Completed', title: 'Completed' },\n];\nconst dummyCards: CardData[] = []; // Start with no cards for a fresh Kanban\n\nfunction KanbanBoard() {\n  // Use dummy data instead of Firestore\n  const [boardData] = useState<BoardState>(dummyBoard);\n  const [columns, setColumns] = useState(dummyColumns);\n  const [cards, setCards] = useState<CardData[]>(dummyCards);\n  // UI state\n  const [isDragging, setIsDragging] = useState(false);\n  const [isDraggingCard, setIsDraggingCard] = useState<string | null>(null);\n  const [breadcrumbs, setBreadcrumbs] = useState<BoardState[]>([dummyBoard]);\n  const [showDepthModal, setShowDepthModal] = useState(false);\n  const [showNewColumnModal, setShowNewColumnModal] = useState(false);\n  const [renamingColumnId, setRenamingColumnId] = useState<string | null>(null);\n  const newColumnBtnRef = useRef<HTMLButtonElement>(null);\n  const [selectedCard, setSelectedCard] = useState<CardData | null>(null);\n\n  // Override drag sensors (no change)\n  const sensors = useSensors(\n    useSensor(PointerSensor, { activationConstraint: { distance: 5 } })\n  );\n\n  // Handlers operate on local dummy state\n  const handleMoveCard = (card: CardData, newStatus: string) => {\n    setCards(c => {\n      const updatedCards = c.map(x => x.id === card.id ? { ...x, status: newStatus } : x);\n      // Force state update by creating new array reference\n      return [...updatedCards];\n    });\n  };\n  const handleAddCard = (status: string, title: string) => {\n    const id = `card-${Date.now()}`;\n    setCards(c => [{ id, boardId: dummyBoard.id, title, description: '', status, pinned: false, hasSubBoard: false }, ...c]);\n  };\n  const handleTogglePin = (cardId: string) => {\n    setCards(cardsList => cardsList.map(card => card.id === cardId ? { ...card, pinned: !card.pinned } : card));\n    setSelectedCard(sc => sc?.id === cardId ? { ...sc, pinned: !sc.pinned } : sc);\n  };\n\n  // Handle drag end: update local state\n  const handleDragEnd = (event: DragEndEvent) => {\n    console.log('DragEnd event:', event);\n    const { active, over } = event;\n    if (!over) return;\n    const newStatus = over.id as string;\n    const cardId = active.id as string;\n    console.log(`Attempting to move card ${cardId} to column ${newStatus}`);\n    if (columns.some((c) => c.id === newStatus)) {\n      const card = cards.find((c) => c.id === cardId);\n      if (card && card.status !== newStatus) {\n        console.log(`Moving card ${cardId} from ${card.status} to ${newStatus}`);\n        handleMoveCard(card, newStatus);\n      }\n    }\n  };\n\n  // No loading guard needed: dummy data is always present\n  return (\n    <DndContext\n      sensors={sensors}\n      collisionDetection={closestCenter}\n      onDragStart={event => {\n        setIsDragging(true);\n        if (event && event.active && event.active.id) {\n          setIsDraggingCard(String(event.active.id));\n        }\n      }}\n      onDragEnd={event => {\n        setIsDragging(false);\n        setIsDraggingCard(null);\n        handleDragEnd(event);\n      }}\n    >\n      <div className=\"bg-background rounded-xl shadow-card p-6\">\n        <Breadcrumbs path={breadcrumbs} />\n        <div className=\"w-full overflow-x-auto pb-4\">\n          <div className=\"flex gap-6 flex-nowrap justify-center mx-auto min-w-fit\" style={{scrollbarWidth: 'thin'}}>\n\n            {columns.map((col: { id: string; title: string }, idx: number) => {\n              const isRenaming = renamingColumnId === col.id;\n              return (\n                <div key={col.id} className=\"flex flex-col items-stretch\">\n                  <div className=\"flex items-center gap-1 mb-1\">\n                    {isRenaming ? (\n                      <RenameColumnInline\n                        value={col.title}\n                        onSave={(name: string) => {\n                          if (!name.trim()) return;\n                          setColumns(cols => cols.map(c => c.id === col.id ? { ...c, title: name.trim() } : c));\n                          setRenamingColumnId(null);\n                        }}\n                        onCancel={() => setRenamingColumnId(null)}\n                      />\n                    ) : (\n                      <>\n                        <button\n                          className=\"text-lg font-semibold text-gray-800 bg-transparent border-none px-0 py-0 cursor-pointer hover:underline focus:outline-accent\"\n                          onClick={() => setRenamingColumnId(col.id)}\n                          tabIndex={0}\n                          aria-label={`Rename column ${col.title}`}\n                          style={{ background: 'none' }}\n                        >\n                          {col.title}\n                        </button>\n                        <button\n                          className=\"ml-1 text-gray-400 hover:text-accent focus:text-accent p-0.5 rounded focus:outline-accent\"\n                          onClick={() => setRenamingColumnId(col.id)}\n                          tabIndex={0}\n                          aria-label={`Edit column ${col.title}`}\n                          style={{ background: 'none' }}\n                        >\n                          <svg width=\"16\" height=\"16\" viewBox=\"0 0 20 20\" fill=\"none\"><path d=\"M4 13.5V16h2.5l7.06-7.06-2.5-2.5L4 13.5zm10.71-6.29c.19-.19.29-.44.29-.71s-.1-.52-.29-.71l-1.5-1.5a1.003 1.003 0 00-1.42 0l-1.13 1.13 2.5 2.5 1.13-1.13z\" fill=\"currentColor\"/></svg>\n                        </button>\n                      </>\n                    )}\n                  </div>\n                  <KanbanColumn\n                    columnId={col.id}\n                    title={col.title}\n                    cards={cards.filter((c: CardData) => c.status === col.id)}\n                    onCardClick={(card: CardData) => {\n                      if (card.hasSubBoard && card.subBoardId) {\n                        if (boardData && boardData.depthLevel >= 3) {\n                          setShowDepthModal(true);\n                        } else {\n                          // Do nothing for now\n                        }\n                      } else {\n                        setSelectedCard(card);\n                      }\n                    }}\n                    onMoveCard={handleMoveCard}\n                    onAddCard={(title: string) => handleAddCard(col.id, title)}\n                    isDragging={isDragging}\n                    setIsDragging={setIsDragging}\n                    isDraggingCard={isDraggingCard}\n                  />\n                </div>\n              );\n            })}\n            {/* New Column Button */}\n            <div className=\"flex flex-col items-center justify-center min-w-[160px]\">\n              <button\n                ref={newColumnBtnRef}\n                className=\"flex items-center gap-2 px-4 py-2 rounded border border-gray-200 bg-gray-50 text-gray-400 hover:text-accent hover:border-accent transition-colors focus:outline-accent focus:ring-2 focus:ring-accent/30 text-base font-medium mt-8 mb-2\"\n                style={{ minHeight: 44 }}\n                onClick={() => setShowNewColumnModal(true)}\n                tabIndex={0}\n                aria-label=\"Add new column\"\n              >\n                <svg width=\"20\" height=\"20\" fill=\"none\" viewBox=\"0 0 20 20\"><circle cx=\"10\" cy=\"10\" r=\"9\" stroke=\"currentColor\" strokeWidth=\"2\"/><path d=\"M10 6v8M6 10h8\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\"/></svg>\n                <span>New Column</span>\n              </button>\n            </div>\n            {/* Modal for new column */}\n            <NewColumnModal\n              open={showNewColumnModal}\n              onClose={() => setShowNewColumnModal(false)}\n              onCreate={(name: string) => {\n                if (!name.trim()) return;\n                // Generate unique id based on name and timestamp\n                const id = name.trim().replace(/\\s+/g, '-') + '-' + Date.now();\n                setColumns(cols => [...cols, { id, title: name.trim() }]);\n                setShowNewColumnModal(false);\n                setTimeout(() => newColumnBtnRef.current?.focus(), 100);\n              }}\n            />\n          </div>\n        </div>\n        {selectedCard ? (\n          <CardModal card={selectedCard} onClose={() => setSelectedCard(null)} onTogglePin={handleTogglePin} />\n        ) : null}\n        <DepthLimitModal\n          open={showDepthModal}\n          onCancel={() => setShowDepthModal(false)}\n          onConfirm={() => setShowDepthModal(false)}\n        />\n      </div>\n    </DndContext>\n  );\n}\n\nexport default KanbanBoard;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}